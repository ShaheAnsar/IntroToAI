# -*- coding: utf-8 -*-
"""501HW2-Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JXBE-bnZKEohqNAxpeYXM6okfZxNljAe

# Branch and bound
"""

import math
import numpy as np
from itertools import product
alpha = [104, 128, 135, 139, 150, 153, 162, 168, 195, 198]
beta = [9, 8, 7, 7, 6, 6, 5, 2, 1, 1]
upper_limit=[] 

#Calculates value of f(x)
def solution_value(x):
  return np.matmul(alpha,x)

#Computes value of u  
def compute_u(r, alpha, beta):
  u = sum([(a ** 2) / b for a, b in zip(alpha, beta)])
  return math.sqrt(u) / (2 * r)
   
#Calculates upper limit for variable assignment
def upper_bound(x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0, x9=0, x10=0):
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x1 += 1
  upper_limit.append(x1-1)
  x1 = 0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x2 += 1
  upper_limit.append(x2-1)
  x2 = 0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x3 += 1
  upper_limit.append(x3-1)
  x3 = 0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x4 += 1
  upper_limit.append(x4-1)
  x4 = 0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x5 += 1
  upper_limit.append(x5-1)
  x5=0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x6 += 1
  upper_limit.append(x6-1)
  x6=0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x7 += 1
  upper_limit.append(x7-1)
  x7=0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x8 += 1
  upper_limit.append(x8-1)
  x8=0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x9 += 1
  upper_limit.append(x9-1)
  x9=0
  while(branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1)):
    x10 += 1
  upper_limit.append(x10-1)
  x10=0

#Updates the R after each variable assignment
def update_r(x10=0,x9=0,x8=0,x7=0,x6=0,x5=0, x4=0, x3=0, x2=0, x1=0, r=68644):
  result = r - (9 * x1 * x1 + 8 * x2 * x2 + 7 * x3 * x3 + 7 * x4 * x4 + 6 * x5 * x5 + 6 * x6 * x6 + 5 * x7 * x7 + 2 * x8 * x8 + x9 * x9 + x10 * x10)
  return result

def branchbound(x10, x9, x8, x7, x6, x5, x4, x3, x2, x1):
  return  9 * x1 * x1 + 8 * x2 * x2 + 7 * x3 * x3 + 7 * x4 * x4 + 6 * x5 * x5 + 6 * x6 * x6 + 5 * x7 * x7 + 2 * x8 * x8 + x9 * x9 + x10 * x10 <= 68644

#Calculates coefficients of x variables
def coefficients(u,x=[]):
  c = [(a / (2 * b * u)) for a, b in zip(alpha[:10-len(x)],beta[:10-len(x)])]
  return c

#Calculates lower bound
def calc_lower_bound():
  r = math.sqrt(68644)
  u = compute_u(r, alpha, beta)
  x_values=[int(i) for i in coefficients(u)]
  return solution_value(x_values)

#Calculates real lower bound
def real_lower_bound(x):
  curr_r_val = update_r(*x)
  if curr_r_val < 0:
    return 0
  elif curr_r_val == 0:
    rem_len = 10-len(x)
    return solution_value([0] * rem_len + x[::-1])
  u = compute_u(math.sqrt(curr_r_val), alpha[:10-len(x)], beta[:10-len(x)])
  x_values = coefficients(u,x)
  return solution_value(x_values + x[::-1])

upper_bound()
lower_bound = calc_lower_bound()
assignments = 0
solutions = []
for x10 in range(upper_limit[9], -1, -1):
  if real_lower_bound(x=[x10]) >= lower_bound:
      for x9 in range(upper_limit[8], -1, -1):
        if real_lower_bound(x=[x10,x9]) >= lower_bound:
            for x8 in range(upper_limit[7], -1, -1):
              if real_lower_bound(x=[x10,x9,x8]) >= lower_bound:
                  for x7 in range(upper_limit[6], -1, -1):
                    if real_lower_bound(x=[x10,x9,x8,x7]) >= lower_bound:      
                        for x6 in range(upper_limit[5], -1, -1):
                          if real_lower_bound(x=[x10,x9,x8,x7,x6]) >= lower_bound:                         
                              for x5 in range(upper_limit[4], -1, -1):
                                if real_lower_bound(x=[x10,x9,x8,x7,x6,x5]) >= lower_bound:                                
                                    for x4 in range(upper_limit[3], -1, -1):
                                      if real_lower_bound(x=[x10, x9, x8, x7, x6, x5, x4]) >= lower_bound:                                     
                                          for x3 in range(upper_limit[2], -1, -1):
                                            if real_lower_bound(x=[x10,x9,x8,x7,x6,x5, x4, x3]) >= lower_bound:                                              
                                                for x2 in range(upper_limit[1], -1, -1):
                                                  if real_lower_bound(x=[x10,x9,x8,x7,x6,x5, x4, x3, x2]) >=lower_bound:                                                   
                                                      for x1 in range(upper_limit[0], -1, -1):
                                                        if real_lower_bound(x=[x10,x9,x8,x7,x6, x5, x4, x3, x2,x1]) >= lower_bound:                                                         
                                                            x = [x1, x2, x3, x4, x5,x6,x7,x8,x9,x10] 
                                                            if solution_value(x) >lower_bound: 
                                                              lower_bound = solution_value(x) 
                                                              solutions.clear() 
                                                              solutions.append(x)
                                                            elif solution_value(x) == lower_bound:                                
                                                              solutions.append(x)
                                                            assignments += 1

print("Maximum value:",lower_bound)
print("Complete variable assignments visited:",assignments)
print("Optimum:",solutions)